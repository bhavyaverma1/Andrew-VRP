## IMPORTANT SNIPPETS
>> 1
avail_ins_distances = []
    for installer in installers:
        if installer.avail == False:
            continue  
        ins_travel_time = get_travel_time(installer.geo_coord,row["job_geo_coordinate"])
        if installer.time_spent + ins_travel_time + row["expected_job_time"] > 480:
            print(installer.time_spent,ins_travel_time,row["expected_job_time"])
            continue
        avail_ins_distances.append((installer.id,ins_travel_time))
    avail_ins_distances = sorted(avail_ins_distances,key=lambda x: x[1])
    ins_to_send = []
    for i in range(row["installers_required"]):        
        ins_to_send.append(avail_ins_distances[i][0])
        
>> 2     
    # [ If enough installers are free simply assign them to the job ]
    
    # Check if enough workers_available 
    if row["installers_required"] > installers_avail:
        print(index,'Low number of installers available for the job')
        break
    
    if row["installers_required"] < num_installers:
        print(index,'Not enough installers available for this job')


ins_end_time = []
    for installer in installers:
        if installer.end_time!=None:
            ins_end_time.append((installer.id,installer.end_time.time().strftime('%H:%M:%S')))
    ins_end_time = sorted(ins_end_time,key=lambda x: x[1])
    
df_pending.rename(columns = {'lat':'Latitude', 'long':'Longitude'}, inplace = True)

>> 3
# df_pending = df_ins1[['id','lat','long']]
# df_pending.rename(columns = {'lat':'Latitude', 'long':'Longitude'}, inplace = True)
# # Inserting factory location to top
# new_row = pd.DataFrame({'id':0, 'Latitude':factory['location'][0],'Longitude':factory['location'][1]}, index =[0])
# df_pending = pd.concat([new_row, df_pending]).reset_index(drop=True)
# df_pending.set_index('id', inplace=True)

# df_pending['Latitude'] = df_pending['Latitude'].astype(float)
# df_pending['Longitude'] = df_pending['Longitude'].astype(float)

# df_pending = df_pending.iloc[:16,:]

>> 4
def distance(lat1, lon1, lat2, lon2):
  # Convert latitude and longitude to spherical coordinates in radians
  rlat1, rlon1, rlat2, rlon2 = map(math.radians, [lat1, lon1, lat2, lon2])

  # Calculate the Haversine distance
  a = math.sin((rlat2 - rlat1) / 2)**2 + math.cos(rlat1) * math.cos(rlat2) * math.sin((rlon2 - rlon1) / 2)**2
  c = 2 * math.asin(math.sqrt(a))
  r = 6371 # Radius of Earth in kilometers

  return c * r

>> 5
def total_distance(df_pending, path):
  # Calculate the total distance of a given path through the points
  d = 0
  for i in range(len(path) - 1):
      d += distance(df_pending[path[i]], points[path[i]][1], points[path[i + 1]][0], points[path[i + 1]][1])
  return d